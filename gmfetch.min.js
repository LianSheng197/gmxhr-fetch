((a,b)=>{a.gmfetch=b("undefined"==typeof GM?{}:GM)})(this,a=>{if("undefined"==typeof GM_xmlhttpRequest&&"undefined"==typeof a.xmlHttpRequest)throw new Error("Either GM_xmlhttpRequest or GM.xmlHttpRequest must exists!");"function"!=typeof GM_xmlhttpRequest||a.xmlHttpRequest||(a.xmlHttpRequest=GM_xmlhttpRequest);class b{constructor(a,b){this.xhr=a,this.init=b}async arrayBuffer(){return this.xhr.response}async blob(){return new Blob([this.xhr.response])}async formData(){throw new Error("No implemented!")}async json(){return JSON.parse((await this.text()))}async text(){const a=new TextDecoder;return a.decode(this.xhr.response)}clone(){return Object.assign({},this)}redirect(){return this.clone()}get ok(){return 200<=this.xhr.status&&300>this.xhr.status}get headers(){return new Headers(this.xhr.headers)}get status(){return this.xhr.status}get statusText(){return this.xhr.statusText}get type(){return"cors"}get url(){return this.init.url}get bodyUsed(){return"GET"!==this.xhr.method.toUpperCase()}get redirected(){return!0}get useFinalURL(){return!0}}return(c,d={})=>new Promise(e=>{Object.assign(d,{method:"GET",headers:{}}),d.url=c,d.responseType="arrayBuffer",a.xmlHttpRequest(Object.assign({},d,{onload:a=>e(new b(a,d)),onerror:a=>e(new b(a,d))}))})});